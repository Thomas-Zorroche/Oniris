cmake_minimum_required(VERSION 3.2 FATAL_ERROR)

project(BasicStarter)

# Add source files
file(GLOB_RECURSE SOURCE_FILES 
	${CMAKE_SOURCE_DIR}/src/*.c
	${CMAKE_SOURCE_DIR}/src/*.cpp)
	
# Add header files
file(GLOB_RECURSE HEADER_FILES 
	${CMAKE_SOURCE_DIR}/src/*.h
	${CMAKE_SOURCE_DIR}/src/*.hpp)

# Add .lib files
link_directories(${CMAKE_SOURCE_DIR}/lib)

# Add Shaders
file(GLOB_RECURSE RES_FILES *.frag *.vert *.glsl *.shader)

# Configure assets header file
configure_file(src/helpers/RootDir.h src/helpers/RootDir.h)
include_directories(${CMAKE_BINARY_DIR}/src)

# Define the executable
add_executable(${PROJECT_NAME} ${HEADER_FILES} ${RES_FILES} ${SOURCE_FILES})

# Add Shaders
file(COPY ${CMAKE_SOURCE_DIR}/res/shaders/
	DESTINATION ${CMAKE_BINARY_DIR}/res/shaders)

# Add Textures
file(COPY ${CMAKE_SOURCE_DIR}/res/img/
	DESTINATION ${CMAKE_BINARY_DIR}/res/img)

# Add Models
file(COPY ${CMAKE_SOURCE_DIR}/res/models/
	DESTINATION ${CMAKE_BINARY_DIR}/res/models)

# Add Scene files
file(COPY ${CMAKE_SOURCE_DIR}/res/scene/
	DESTINATION ${CMAKE_BINARY_DIR}/res/scene)

# Add Assimp dll into Exec Directory
file(COPY ${CMAKE_SOURCE_DIR}/lib/assimp-vc142-mtd.dll
	 DESTINATION ${CMAKE_BINARY_DIR}/Debug/)

# External libraries

# We need a CMAKE_DIR with some code to find external dependencies
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

# OpenGL
find_package(OpenGL REQUIRED)

# GLM
find_package(GLM REQUIRED)
message(STATUS "GLM included at ${GLM_INCLUDE_DIR}")

# GLFW
find_package(GLFW3 REQUIRED)
message(STATUS "Found GLFW3 in ${GLFW3_INCLUDE_DIR}")

# STB_IMAGE
add_library(STB_IMAGE "thirdparty/stb_image.cpp")

# GLAD
add_library(GLAD "thirdparty/glad.c")

# Put all libraries into a variable
set(LIBS glfw3 opengl32 STB_IMAGE GLAD assimp-vc142-mtd)

# Define the include DIRs
include_directories(
	"${CMAKE_SOURCE_DIR}/src"
	"${CMAKE_SOURCE_DIR}/src/vendor"
	"${CMAKE_SOURCE_DIR}/include"
)

# Define the link libraries
target_link_libraries(${PROJECT_NAME} ${LIBS})

add_compile_definitions(GLFW_INCLUDE_NONE)

